// Autogenerated from Pigeon (v0.1.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon
package com.example.flutter_pigeon_demo;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.ArrayList;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings("unused")
public class PigeonDemoMessage {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class DemoReply {
    private String result;
    public String getResult() { return result; }
    public void setResult(String setterArg) { this.result = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("result", result);
      return toMapResult;
    }
    static DemoReply fromMap(HashMap map) {
      DemoReply fromMapResult = new DemoReply();
      Object result = map.get("result");
      fromMapResult.result = (String)result;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class DemoRequest {
    private String methodName;
    public String getMethodName() { return methodName; }
    public void setMethodName(String setterArg) { this.methodName = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("methodName", methodName);
      return toMapResult;
    }
    static DemoRequest fromMap(HashMap map) {
      DemoRequest fromMapResult = new DemoRequest();
      Object methodName = map.get("methodName");
      fromMapResult.methodName = (String)methodName;
      return fromMapResult;
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface PigeonDemoApi {
    DemoReply getMessage(DemoRequest arg);

    /** Sets up an instance of `PigeonDemoApi` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, PigeonDemoApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PigeonDemoApi.getMessage", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              DemoRequest input = DemoRequest.fromMap((HashMap)message);
              DemoReply output = api.getMessage(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static HashMap wrapError(Exception exception) {
    HashMap<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", null);
    errorMap.put("details", null);
    return errorMap;
  }
}
